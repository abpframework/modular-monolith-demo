@page "/Ordering/Orders"
@attribute [Authorize(OrderingPermissions.Orders.Default)]
@using global::Shopularity.Ordering.Orders
@using global::Shopularity.Ordering.Orders
@using global::Shopularity.Ordering.Localization
@using global::Shopularity.Ordering.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@using Blazorise
@using Blazorise.Components
@using Blazorise.DataGrid
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.ObjectMapping
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using global::Shopularity.Ordering.OrderLines
@using global::Shopularity.Ordering.Permissions
@using Volo.Abp.AspNetCore.Components.Web
@using Volo.Abp.AspNetCore.Components
@using Microsoft.AspNetCore.Components
@using Volo.Abp.Http.Client
@inherits AbpComponentBase
@inject IOrdersAppService OrdersAppService
@inject IOrderLinesAppService OrderLinesAppService
@inject IUiMessageService UiMessageService
@inject AbpBlazorMessageLocalizerHelper<OrderingResource> LH
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager
@using Shopularity.Ordering.Orders


@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Orders"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

<style>
    tr.table-row-selectable:hover {
        cursor: default;
    }
</style>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>

        <Row>
            <div class="col col-md-8 col-lg-10">
                <div class="mb-3">
                    <Form id="OrderSearchForm">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit @bind-Text="@Filter.FilterText"
                                          Autofocus="true"
                                          Placeholder="@L["Search"]">
                                </TextEdit>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <SubmitButton Form="OrderSearchForm" Clicked="GetOrdersAsync">
                                    <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                                </SubmitButton>
                            </Addon>
                        </Addons>
                    </Form>
                </div>
            </div>

            <div class="col-md-4 col-lg-2">
                <div class="mb-3">
                    <Button Color="Color.Primary" Outline Style="width:100%" id="AdvancedFilterSectionToggler"
                            Clicked="@(() => ShowAdvancedFilters = !ShowAdvancedFilters)">
                        @L["Filters"]
                        <i aria-hidden="true" class="fa ms-1 @(!ShowAdvancedFilters ? "fa-angle-down" : "fa-angle-up")"></i>
                    </Button>
                </div>
            </div>

            <div style="display: @(!ShowAdvancedFilters ? "none" : "block")" class="mt-3">
                <Row>
                    <Column ColumnSize="ColumnSize.Is3">
                        <Field>
                            <FieldLabel>@L["State"]</FieldLabel>
                            <Select TValue="OrderState?"
                                    SelectedValue="@Filter.State"
                                    SelectedValueChanged="@OnStateChangedAsync">

                                <SelectItem></SelectItem>

                                @foreach (OrderState value in Enum.GetValues(typeof(OrderState)))
                                {
                                    <SelectItem Value="value">
                                        @value
                                    </SelectItem>
                                }

                            </Select>
                        </Field>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3">
                        <Field>
                            <FieldLabel>@L["MinTotalPrice"]</FieldLabel>
                            <NumericEdit TValue="double?"
                                         Value="@Filter.TotalPriceMin"
                                         ValueChanged="@OnTotalPriceMinChangedAsync"/>
                        </Field>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3">
                        <Field>
                            <FieldLabel>@L["MaxTotalPrice"]</FieldLabel>
                            <NumericEdit TValue="double?"
                                         Value="@Filter.TotalPriceMax"
                                         ValueChanged="@OnTotalPriceMaxChangedAsync"/>
                        </Field>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3">
                        <Field>
                            <FieldLabel>@L["ShippingAddress"]</FieldLabel>
                            <TextEdit Text="@Filter.ShippingAddress" TextChanged="@OnShippingAddressChangedAsync"/>
                        </Field>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is3">
                        <Field>
                            <FieldLabel>@L["CargoNo"]</FieldLabel>
                            <TextEdit Text="@Filter.CargoNo" TextChanged="@OnCargoNoChangedAsync"/>
                        </Field>
                    </Column>
                </Row>

            </div>

        </Row>


    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>
        <DataGrid TItem="OrderDto"
                  @ref="DataGridRef"
                  Data="OrderList"

                  DetailRowTrigger="DetailRowTriggerHandler"
                  DetailRowStartsVisible="false"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize"
                  Class="datagrid-detail">
            <LoadingTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                        <RadarSpinner/>
                    </Column>
                </Row>
            </LoadingTemplate>
            <EmptyTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                        <Heading Size="HeadingSize.Is4" TextAlignment="TextAlignment.Center">@L["NoDataAvailable"]</Heading>
                    </Column>
                </Row>
            </EmptyTemplate>
            <DataGridColumns>

                @if (ShouldShowDetailRow())
                {
                    <DataGridColumn TItem="OrderDto"
                                    Field="Id"
                                    Width="0.5rem">
                        <DisplayTemplate>
                            @if (context.Id == SelectedOrder?.Id)
                            {
                                <i class="fas fa-chevron-up" @onclick="() => ToggleDetails(context)" style="cursor: pointer;"/>
                            }
                            else
                            {
                                <i class="fas fa-chevron-down" @onclick="() => ToggleDetails(context)" style="cursor: pointer;"/>
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                }
                <DataGridEntityActionsColumn TItem="OrderDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="OrderDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="OrderDto"
                                          Visible="@(CanSetShipment && context.State == OrderState.Processing)"
                                          Clicked="async () => await OpenShipmentModalAsync(context)"
                                          Text="@L["SetShipmentDetails"]">
                            </EntityAction>
                            <EntityAction TItem="OrderDto"
                                          Visible="@CanEditOrder"
                                          Clicked="async () => await OpenEditOrderModalAsync(context)"
                                          Text="@L["Edit"]">
                            </EntityAction>
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>

                <DataGridColumn TItem="OrderDto"
                                Field="UserId"
                                Caption="@L["UserId"]">
                </DataGridColumn>

                <DataGridColumn TItem="OrderDto"
                                Field="State"
                                Caption="@L["State"]">
                    <DisplayTemplate>
                        @L[$"Enum:OrderState.{(int) context.State}"]
                    </DisplayTemplate>
                </DataGridColumn>


                <DataGridColumn TItem="OrderDto"
                                Field="TotalPrice"
                                Caption="@L["TotalPrice"]">
                </DataGridColumn>

                <DataGridColumn TItem="OrderDto"
                                Field="ShippingAddress"
                                Caption="@L["ShippingAddress"]">
                </DataGridColumn>

                <DataGridColumn TItem="OrderDto"
                                Field="CargoNo"
                                Caption="@L["CargoNo"]">
                </DataGridColumn>

            </DataGridColumns>

            <DetailRowTemplate>
                <div class="bg-light rounded p-3 pb-0 pt-1">
                    <Tabs SelectedTab="@SelectedChildTab" SelectedTabChanged="@OnSelectedChildTabChanged">
                        <Items>
                            <Tab Name="orderline-tab">@L["OrderLines"]</Tab>
                        </Items>

                        <Content>
                            <TabPanel Name="orderline-tab" Class="mt-0">
                                @{
                                    var orderLines = (context as OrderDto).OrderLines;

                                    <DataGrid @ref="@OrderLineDataGrids[context.Id]"
                                              TItem="OrderLineDto"
                                              Data="orderLines"
                                              ReadData="@((args) => OnOrderLineDataGridReadAsync(args, context.Id))"
                                              Sortable="true"
                                              ShowCaptions="true"
                                              ShowPager="true"
                                              Responsive="true"
                                              PageSize="OrderLinePageSize">

                                        <DataGridColumns>
                                            <DataGridCommandColumn/>


                                            <DataGridColumn TItem="OrderLineDto"
                                                            Field="ProductId"
                                                            Caption="@L["ProductId"]">
                                            </DataGridColumn>

                                            <DataGridColumn TItem="OrderLineDto"
                                                            Field="Name"
                                                            Caption="@L["Name"]">
                                            </DataGridColumn>

                                            <DataGridColumn TItem="OrderLineDto"
                                                            Field="Price"
                                                            Caption="@L["Price"]">
                                            </DataGridColumn>

                                            <DataGridColumn TItem="OrderLineDto"
                                                            Field="Amount"
                                                            Caption="@L["Amount"]">
                                            </DataGridColumn>

                                            <DataGridColumn TItem="OrderLineDto"
                                                            Field="TotalPrice"
                                                            Caption="@L["TotalPrice"]">
                                            </DataGridColumn>

                                        </DataGridColumns>
                                    </DataGrid>
                                }
                            </TabPanel>
                        </Content>
                    </Tabs>
                </div>
            </DetailRowTemplate>
        </DataGrid>
    </CardBody>
</Card>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditOrderModal" Closing="@EditOrderModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="EditOrderForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditOrderModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingOrderValidations"
                             Mode="ValidationMode.Auto"
                             Model="@EditingOrder"
                             ValidateOnLoad="false">


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["UserId"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingOrder.UserId" ReadOnly>
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <FieldLabel>@L["State"]</FieldLabel>
                        <Select TValue="OrderState" @bind-SelectedValue="@EditingOrder.State" ReadOnly>
                            @foreach (var itemValue in Enum.GetValues(typeof(OrderState)))
                            {
                                <SelectItem TValue="OrderState" Value="@((OrderState) itemValue)">
                                    @L[$"Enum:OrderState.{((OrderState) itemValue).ToString("d")}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["TotalPrice"]</FieldLabel>
                            <NumericPicker TValue="double" @bind-Value="@EditingOrder.TotalPrice" ReadOnly>
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </NumericPicker>
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["ShippingAddress"] *</FieldLabel>
                            @if(EditingOrder.State is OrderState.New or OrderState.WaitingForPayment or OrderState.Paid or OrderState.Processing){
                                <MemoEdit @bind-Text="@EditingOrder.ShippingAddress" MaxLength="OrderConsts.ShippingAddressMaxLength">
                                    <Feedback>
                                        <ValidationError/>
                                    </Feedback>
                                </MemoEdit>
                            }
                            else
                            {
                                <MemoEdit @bind-Text="@EditingOrder.ShippingAddress" MaxLength="OrderConsts.ShippingAddressMaxLength" ReadOnly>
                                    <Feedback>
                                        <ValidationError/>
                                    </Feedback>
                                </MemoEdit>
                            }
                        </Field>
                    </Validation>


                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["CargoNo"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingOrder.CargoNo" MaxLength="OrderConsts.CargoNoMaxLength" ReadOnly>
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditOrderModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditOrderForm" Clicked="UpdateOrderAsync"/>

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

@* ************************* SHIPMENT MODAL ************************* *@
<Modal @ref="ShippingModal" Closing="@ShippingModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="SetShipmentForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseShipmentModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@ShipmentValidations"
                             Mode="ValidationMode.Auto"
                             Model="@Shipment"
                             ValidateOnLoad="false">
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["CargoNo"]</FieldLabel>
                            <TextEdit @bind-Text="@Shipment.CargoNo" MaxLength="OrderConsts.CargoNoMaxLength">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseShipmentModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="SetShipmentForm" Clicked="SetShipmentAsync"/>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>