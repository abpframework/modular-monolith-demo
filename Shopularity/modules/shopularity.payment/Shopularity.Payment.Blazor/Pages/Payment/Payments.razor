@page "/Payment/Payments"
@attribute [Authorize(PaymentPermissions.Payments.Default)]
@using global::Shopularity.Payment.Payments
@using global::Shopularity.Payment.Localization
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.BlazoriseUI.Components
@using Volo.Abp.AspNetCore.Components.Messages
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout
@using global::Shopularity.Payment.Permissions
@using Volo.Abp.AspNetCore.Components
@using Volo.Abp.Http.Client
@inherits AbpComponentBase
@inject IPaymentsAppService PaymentsAppService
@inject IUiMessageService UiMessageService
@inject AbpBlazorMessageLocalizerHelper<PaymentResource> LH
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager


@* ************************* PAGE HEADER ************************* *@
<PageHeader Title="@L["Payments"]" BreadcrumbItems="BreadcrumbItems" Toolbar="Toolbar">

</PageHeader>

<style>
    tr.table-row-selectable:hover {
        cursor: default;
    }
</style>

@* ************************* SEARCH ************************* *@
<Card>
    <CardBody>

        <Row>
            <div class="col col-md-8 col-lg-10">
                <div class="mb-3">
                    <Form id="PaymentSearchForm">
                        <Addons>
                            <Addon AddonType="AddonType.Body">
                                <TextEdit @bind-Text="@Filter.FilterText"
                                        Autofocus="true"
                                        Placeholder="@L["Search"]">
                                </TextEdit>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <SubmitButton Form="PaymentSearchForm" Clicked="GetPaymentsAsync">
                                    <Icon Name="IconName.Search" Class="me-1"></Icon>@L["Search"]
                                </SubmitButton>
                            </Addon>
                        </Addons>
                    </Form>
                </div>
            </div>
                
                   <div class="col-md-4 col-lg-2">
            <div class="mb-3">
               <Button Color="Color.Primary" Outline Style="width:100%" id="AdvancedFilterSectionToggler"
                         Clicked="@(() => ShowAdvancedFilters = !ShowAdvancedFilters)">@L["Filters"]
                         <i aria-hidden="true" class="fa ms-1 @(!ShowAdvancedFilters ? "fa-angle-down" : "fa-angle-up")"></i>
               </Button>
            </div>
       </div>
        
        <div style="display: @(!ShowAdvancedFilters ? "none" : "block")"  class="mt-3">
            <Row>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["OrderId"]</FieldLabel>
                        <TextEdit Text="@Filter.OrderId" TextChanged="@OnOrderIdChangedAsync" />                       
                    </Field>
                </Column>
                <Column ColumnSize="ColumnSize.Is3">
                    <Field>
                        <FieldLabel>@L["State"]</FieldLabel>
                        <Select TValue="PaymentState?"
		SelectedValue="@Filter.State"
		SelectedValueChanged="@OnStateChangedAsync">

<SelectItem></SelectItem>

@foreach(PaymentState value in Enum.GetValues(typeof(PaymentState)))
{
	<SelectItem Value="value">
		@value
	</SelectItem>
}

</Select>                       
                    </Field>
                </Column>
            </Row>

        </div>

        </Row>


    </CardBody>
</Card>

@* ************************* DATA GRID ************************* *@
<Card>
    <CardBody>
        <DataGrid TItem="PaymentDto"
                  @ref="DataGridRef"
                  Data="PaymentList"
                  
                  
                  
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Responsive="true"
                  PageSize="PageSize"
                  Class="datagrid-detail">
            <LoadingTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                       <RadarSpinner />
                    </Column>
                </Row>
            </LoadingTemplate>
            <EmptyTemplate>
                <Row Class="w-100 align-items-center" Style="height: 150px;">
                    <Column>
                        <Heading Size="HeadingSize.Is4" TextAlignment="TextAlignment.Center">@L["NoDataAvailable"]</Heading>
                    </Column>
                </Row>
            </EmptyTemplate>   
            <DataGridColumns>
                
                
                <DataGridEntityActionsColumn TItem="PaymentDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="PaymentDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="PaymentDto"
                                          Visible="@CanEditPayment"
                                          Clicked="async () => await OpenEditPaymentModalAsync(context)"
                                          Text="@L["Edit"]"></EntityAction>
                            <EntityAction TItem="PaymentDto"
                                          Visible="@CanDeletePayment"
                                          Clicked="() => DeletePaymentAsync(context)"
                                          ConfirmationMessage="@(()=> L["DeleteConfirmationMessage"])"
                                          Text="@L["Delete"]"></EntityAction>

                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
               
              <DataGridColumn TItem="PaymentDto"
                      Field="OrderId"
                      Caption="@L["OrderId"]">
              </DataGridColumn>

              <DataGridColumn TItem="PaymentDto"
                      Field="State"
                      Caption="@L["State"]">
                    <DisplayTemplate>
                        @L[$"Enum:PaymentState.{(int)context.State}"]
                    </DisplayTemplate>
              </DataGridColumn>


            </DataGridColumns>
            
            
        </DataGrid>
    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
<Modal @ref="CreatePaymentModal" Closing="@CreatePaymentModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="CreatePaymentForm">
            <ModalHeader>
                <ModalTitle>@L["NewPayment"]</ModalTitle>
                <CloseButton Clicked="CloseCreatePaymentModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@NewPaymentValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewPayment"
                            ValidateOnLoad="false">
                    
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["OrderId"] *</FieldLabel>
                            <TextEdit @bind-Text="@NewPayment.OrderId"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <FieldLabel>@L["State"]</FieldLabel>
                        <Select TValue="PaymentState" @bind-SelectedValue="@NewPayment.State" >
                            @foreach (var itemValue in Enum.GetValues(typeof(PaymentState)))
                            {
                                <SelectItem TValue="PaymentState" Value="@((PaymentState) itemValue)">
                                    @L[$"Enum:PaymentState.{((PaymentState) itemValue).ToString("d")}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreatePaymentModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreatePaymentForm" Clicked="CreatePaymentAsync"/>

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

@* ************************* EDIT MODAL ************************* *@
<Modal @ref="EditPaymentModal" Closing="@EditPaymentModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">

        <Form id="EditPaymentForm">
            <ModalHeader>
                <ModalTitle>@L["Update"]</ModalTitle>
                <CloseButton Clicked="CloseEditPaymentModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditingPaymentValidations"
                            Mode="ValidationMode.Auto"
                            Model="@EditingPayment"
                            ValidateOnLoad="false">
                    
                    
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["OrderId"] *</FieldLabel>
                            <TextEdit @bind-Text="@EditingPayment.OrderId"  ReadOnly>
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <FieldLabel>@L["State"]</FieldLabel>
                        <Select TValue="PaymentState" @bind-SelectedValue="@EditingPayment.State" ReadOnly>
                            @foreach (var itemValue in Enum.GetValues(typeof(PaymentState)))
                            {
                                <SelectItem TValue="PaymentState" Value="@((PaymentState) itemValue)">
                                    @L[$"Enum:PaymentState.{((PaymentState) itemValue).ToString("d")}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    
                    
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditPaymentModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="EditPaymentForm" Clicked="UpdatePaymentAsync" />

            </ModalFooter>
        </Form>

    </ModalContent>
</Modal>

